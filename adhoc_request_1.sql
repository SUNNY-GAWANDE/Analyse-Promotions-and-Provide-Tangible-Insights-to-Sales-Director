use retail_events_db;

create table master_table as(
select e.*,
s.city,
p.product_name,
p.category,
c.campaign_name,
c.start_date,
c.end_date
from fact_events as e
left join 
dim_stores as s
on e.store_id = s.store_id
left join 
dim_products as p
on e.product_code = p.product_code
left join 
dim_campaigns as c
on e.campaign_id = c.campaign_id);

select * from master_table;

-- 1 Provide list of products with a base price greater than 500 and that are featured in promo type 'BOGOF'(Buy One Get One free).
select distinct(product_name), base_price
from master_table
where base_price > 500 and promo_type = 'BOGOF';

-- 2 Generate a report that provides an overview of the number of stores in each city.
select city, count(distinct(store_id)) as city_count
from master_table
group by 1
order by 2 desc;

select * from master_table;

-- 3 Generate a report that generate each campaign along with the total revenue generated before and after the revenue.
select campaign_name,
sum(base_price * `quantity_sold(before_promo)`)/ 1000000 as before_promotion,
sum(base_price * `quantity_sold(after_promo)`) / 1000000 as after_promotion
from master_table
group by 1;

 
-- 4 Produce a report that calculates the Incremental Sold Quantity (ISU %) for each category for Diwali campaign.
with cte as(
select category,
round((sum(`quantity_sold(after_promo)`) - sum(`quantity_sold(before_promo)`)) /sum(`quantity_sold(before_promo)`)*100,2) as `ISU %`
from master_table
where campaign_name = 'Diwali'
group by 1
order by 2 desc)

select *,
dense_rank() over(order by `ISU %` desc) as cat_rank
from cte;


-- 5 Create a report for top 5 product , ranked by incremental revenue(IR %)  across all campaign.
select distinct(product_name),
category,
round((sum(base_price * `quantity_sold(after_promo)`) - sum(base_price * `quantity_sold(before_promo)`)) / sum((base_price * `quantity_sold(before_promo)`))*100,2) as `IR%`
from master_table
group by 1, 2
order by 3 desc
limit 5;

-- List of Revenue generated by cities
select distinct(city),
round(avg(base_price * `quantity_sold(after_promo)`),2) as revenue_by_city
from master_table
group by 1
order by 2 desc;

